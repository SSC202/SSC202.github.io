<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>STM32 HAL 1_环境配置</title>
    <link href="/2024/10/10/STM32%20HAL%201_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/10/10/STM32%20HAL%201_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="STM32-HAL-1-环境配置"><a href="#STM32-HAL-1-环境配置" class="headerlink" title="STM32 HAL 1_环境配置"></a>STM32 HAL 1_环境配置</h1><h2 id="1-Windows-环境配置"><a href="#1-Windows-环境配置" class="headerlink" title="1. Windows 环境配置"></a>1. Windows 环境配置</h2><blockquote><p>配置前注意：<strong>安装路径不能有中文（包括电脑用户名）！！！</strong></p></blockquote><h3 id="1-1-Keil-STM32CubeMX-环境配置"><a href="#1-1-Keil-STM32CubeMX-环境配置" class="headerlink" title="1.1 Keil + STM32CubeMX 环境配置"></a>1.1 Keil + STM32CubeMX 环境配置</h3><ul><li><p>Keil 下载</p><ol><li>下载 MDK 53x</li></ol>  <img src="/2024/10/10/STM32%20HAL%201_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/picture_1.jpg" class=""><ol start="2"><li><p>一路点ok即可（注意修改安装路径）</p></li><li><p>（以管理员权限）打开 Keil，选择 File -&gt; License Management</p></li></ol><p>  ​<img src="/picture_2.jpg" alt="NULL"></p><p>  ​Name，Company，Email是随机填写的，最后复制CID。</p><ol start="4"><li>打开注册机（取消防火墙后操作）</li></ol><p>  <img src="/picture_3.jpg" alt="NULL"></p><p>  先复制CID，Target 选择 ARM，点击 Generate，最后复制生成的破解码。</p><ol start="5"><li>回到 3 所示的界面，复制刚才的破解码到 LIC，选择 Add LIC 即可破解。</li><li>安装芯片的离线包（可以选择在 Pack 内安装在线包，但是取决于网速）。</li></ol></li><li><p>STM32CubeMX 的下载和初始配置</p><ol><li>首先需要下载 Java 环境。（新版本由Cube自身配置）</li><li>下载并安装 STM32CubeMX（高版本可打开低版本，但是低版本打不开高版本）（注意改变安装路径）</li><li>STM32CubeMX 的工程配置。</li></ol><blockquote><ol><li><p>选择芯片</p></li><li><p>选择烧录方式</p><p><img src="/picture_4.jpg" alt="NULL"></p><ol start="3"><li>选择时钟源（外部高速晶振）</li></ol><p><img src="/picture_5.jpg" alt="NULL"></p><ol start="4"><li><p>配置所需要的外设</p></li><li><p>配置时钟树</p><p><img src="/picture_7.jpg" alt="NULL"></p><ol start="6"><li>配置工程路径(IDE 选择 MDK-ARM)</li></ol><p><img src="/picture_6.jpg" alt="NULL"></p><p><img src="/picture_8.jpg" alt="NULL"></p><ol start="8"><li>选择 Generate Code 即可</li></ol><blockquote><p>在新版本中，Generate Code 会首先检查代码包是否存在更新，首先应当注册并登录 ST 账号，然后保证电脑关于网络的防火墙关闭，即可下载并安装最新代码包。</p></blockquote></li></ol></li></ol></blockquote></li></ul><h4 id="Keil-使用说明"><a href="#Keil-使用说明" class="headerlink" title="Keil 使用说明"></a>Keil 使用说明</h4><ul><li>魔术棒设置</li></ul><blockquote><table><thead><tr><th>选项卡</th><th>说明</th></tr></thead><tbody><tr><td>Target 选项卡</td><td>设置使用的编译器版本、外部晶振频率</td></tr><tr><td>Output 选项卡</td><td>设置Objects输出文件夹、生成.hex文件、输出浏览信息</td></tr><tr><td>Listing 选项卡</td><td>设置Listing输出文件夹</td></tr><tr><td>C&#x2F;C++ 选项卡</td><td>设置全局宏定义、优化等级、C99 Mode、设置头文件包含路径</td></tr><tr><td>Debug 选项卡</td><td>设置使用的仿真器类型、选择的下载接口等</td></tr><tr><td>Utilities 选项卡</td><td>设置下载功能、下载算法、下载算法起始地址和大小等</td></tr><tr><td>Linker 选项卡</td><td>添加分散加载文件</td></tr></tbody></table></blockquote><ol><li><p>AC5和AC6编译器对比</p><ul><li>AC6 对中文支持极差， goto definition 无法使用，误报等</li><li>AC6 对某些代码优化可能导致运行异常，需慢慢调试</li><li>AC6 编译速度比 AC5 快</li><li>AC6 语法检查非常严格，代码严谨性较好</li></ul><p> 一般使用AC5编译器。</p><blockquote><p>注意：MDK537 以上仅支持 AC6 编译器，需要使用 AC5 编译器需要自行下载。</p></blockquote></li><li><p>文件路径</p><p> 绝对路径是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径；</p><p> 相对路径就是指由某个文件所在的路径引起的跟其它文件（或文件夹）的路径关系；</p><blockquote><ol><li>默认路径就是指 MDK 工程所在的路径，即.uvprojx 文件所在路径（文件夹）</li><li>“.&#x2F;”表示当前目录（相对当前路径，也可以写做“.\”）</li><li>“..&#x2F;”表示当前目录的上一层目录（也可以写做“..\”）</li></ol></blockquote></li></ol><h3 id="1-2-STM32CubeMX-Clion-环境配置"><a href="#1-2-STM32CubeMX-Clion-环境配置" class="headerlink" title="1.2 STM32CubeMX + Clion 环境配置"></a>1.2 STM32CubeMX + Clion 环境配置</h3><ul><li>环境配置</li></ul><ol><li>OpenOCD 用于程序烧录</li></ol><p><img src="/picture_9.jpg" alt="NULL"></p><ol start="2"><li>MinGW 提供编译环境</li></ol><p><img src="/picture_10.jpg" alt="NULL"></p><ol start="3"><li>arm-none-eabi-gcc 交叉编译链</li></ol><p><img src="/picture_11.jpg" alt="NULL"></p><ol start="4"><li>添加环境变量</li></ol><p>.\GNU Arm Toolchain\GNU Arm Embedded Toolchain\10 2021.10\bin</p><p>.\OpenOCD-20230712-0.12.0\bin</p><p>.\mingw64\bin</p><ul><li>Clion 安装</li></ul><ol><li>找到Clion官网进行下载和安装，激活方式自定（激活码可以去网上随便翻翻）</li><li>在Clion中选择创建STM32CubeMX的项目</li></ol><p><img src="/picture_12.jpg" alt="NULL"></p><ol start="3"><li><p>点击create后会生成一个**.ioc**文件，这个文件跟使用STM32CubeMX直接创建的是一样的，点击链接可以跳转到STM32CubeMX中打开这个ioc文件.</p></li><li><p>默认选中的芯片型号是STM32F030F4Px，可以在CubeMX中重新选择自己需要的芯片，一切操作都和使用Keil开发没有区别。</p><blockquote><p>设置中<strong>项目名称一定要和在Clion中建立的一致</strong>，这样生成的工程文件才会覆盖Clion中的文件，否则会另外生成一个文件夹，Clion就无法读取了。</p></blockquote><blockquote><p>生成的IDE类型选择是<strong>STM32CubeIDE</strong>。</p></blockquote></li></ol><p>每次修改完点Generate之后，弹窗直接点Close，Clion里面会自动更新文件。</p><ol start="5"><li><p>在文件 -&gt; 设置里面选择 STM32CubeMX 和 OpenOCD 的位置</p><p><img src="/picture_13.jpg" alt="NULL"></p></li><li><p>编译工具链配置</p></li></ol><p><img src="/picture_14.jpg" alt="NULL"></p><p>此时可编译通过。</p><ol start="7"><li>烧录配置</li></ol><blockquote><ol><li>新建配置文件stlink.cfg</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># choose st-link/j-link/dap-link etc.</span><br><span class="hljs-comment">#adapter driver cmsis-dap</span><br><span class="hljs-comment">#transport select swd</span><br><span class="hljs-built_in">source</span> [find interface/stlink.cfg]<br>transport <span class="hljs-keyword">select</span> hla_swd<br><span class="hljs-built_in">source</span> [find target/stm32f1x.cfg]<br><span class="hljs-comment"># download speed = 10MHz</span><br>adapter speed 10000<br></code></pre></td></tr></table></figure><p>前两行设置了仿真器的类型和接口，下面几行指定了<strong>Flash大小</strong>、<strong>芯片类型</strong>、<strong>下载速度</strong>等。</p><ol start="2"><li>烧录配置中添加文件即可</li></ol><p><img src="/picture_15.jpg" alt="NULL"></p></blockquote><ul><li>常见问题</li></ul><p>1. </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Info</span> : The selected transport took <span class="hljs-keyword">over</span> low-<span class="hljs-keyword">level</span> target control. The results might differ compared <span class="hljs-keyword">to</span> plain JTAG/SWD<br>adapter speed: <span class="hljs-number">8000</span> kHz<br>adapter_nsrst_delay: <span class="hljs-number">100</span><br><span class="hljs-keyword">Info</span> : clock speed <span class="hljs-number">8000</span> kHz<br><span class="hljs-keyword">Info</span> : STLINK v2 JTAG v31 API v2 SWIM v7 VID <span class="hljs-number">0x0483</span> PID <span class="hljs-number">0x3748</span><br><span class="hljs-keyword">Info</span> : <span class="hljs-keyword">using</span> stlink api v2<br><span class="hljs-keyword">Info</span> : Target voltage: <span class="hljs-number">3.162004</span><br><span class="hljs-keyword">Info</span> : Unable <span class="hljs-keyword">to</span> match requested speed <span class="hljs-number">8000</span> kHz, <span class="hljs-keyword">using</span> <span class="hljs-number">4000</span> kHz<br><span class="hljs-keyword">Info</span> : Stlink adapter speed <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> <span class="hljs-number">4000</span> kHz<br>Warn : UNEXPECTED idcode: <span class="hljs-number">0x2ba01477</span><br>Error: expected <span class="hljs-number">1</span> <span class="hljs-keyword">of</span> <span class="hljs-number">1</span>: <span class="hljs-number">0x1ba01477</span><br><span class="hljs-keyword">in</span> <span class="hljs-keyword">procedure</span> <span class="hljs-string">&#x27;program&#x27;</span> <br><span class="hljs-keyword">in</span> <span class="hljs-keyword">procedure</span> <span class="hljs-string">&#x27;init&#x27;</span> <span class="hljs-keyword">called</span> at file &quot;embedded:startup.tcl&quot;, <span class="hljs-type">line</span> <span class="hljs-number">495</span><br><span class="hljs-keyword">in</span> <span class="hljs-keyword">procedure</span> <span class="hljs-string">&#x27;ocd_bouncer&#x27;</span><br>** OpenOCD init failed **<br>shutdown command invoked<br></code></pre></td></tr></table></figure><p>识别STLink ID错误，通常是 STLink 过新或过旧</p><blockquote><ol><li>配置文件首行加入 set CPUTAPID 0 禁止识别ID</li><li>修改以下其中一行：</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#jtag scan chain</span><br><span class="hljs-keyword">if</span> &#123; [info <span class="hljs-keyword">exists</span> CPUTAPID] &#125; &#123;<br>   <span class="hljs-keyword">set</span> _CPUTAPID $CPUTAPID<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-keyword">if</span> &#123; [using_jtag] &#125; &#123;<br>      <span class="hljs-comment"># See STM Document RM0008 Section 26.6.3</span><br>      <span class="hljs-keyword">set</span> _CPUTAPID <span class="hljs-number">0</span>x3ba00477<br>   &#125; &#123;<br>      <span class="hljs-comment"># this is the SW-DP tap id not the jtag tap id</span><br>      <span class="hljs-keyword">set</span> _CPUTAPID <span class="hljs-number">0</span>x1ba01477<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> _CPUTAPID <span class="hljs-comment">0x2ba01477</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="1-3-STM32CubeMX-VSCode-EIDE-环境配置"><a href="#1-3-STM32CubeMX-VSCode-EIDE-环境配置" class="headerlink" title="1.3 STM32CubeMX + VSCode + EIDE 环境配置"></a>1.3 STM32CubeMX + VSCode + EIDE 环境配置</h3><ul><li>首先在VSCode上下载以下插件：</li></ul><p><img src="/picture_16.jpg" alt="NULL"></p><p><img src="/picture_17.jpg" alt="NULL"></p><ul><li>进行以下配置：</li></ul><ol><li>编译链配置</li></ol><blockquote><ol><li>如果安装了Keil，则可以配置以下编译链</li></ol><p><img src="/picture_18.jpg" alt="NULL"></p><ol start="2"><li>arm-none-eabi-gcc 交叉编译链</li></ol><p><img src="/picture_19.jpg" alt="NULL"></p></blockquote><ol start="2"><li>生成配置</li></ol><p><img src="/picture_20.jpg" alt="NULL"></p><p>点击左侧边框生成的EIDE插件：</p><p><img src="/picture_22.jpg" alt="NULL"></p><p>在”设置编译链“里面如果看到相关编译链旁边显示√，则配置完成。</p><p><img src="/picture_21.jpg" alt="NULL"></p><ul><li>工程配置</li></ul><ol><li><p>使用STM32CubeMX中的<code>Makefile</code>选项生成工程。</p></li><li><p>用 VS Code 打开刚才生成的工程目录，随后EIDE - 新建项目 - 空项目 - Cortex-M - 输入项目名称（需要和 CubeMX 生成的文件夹名称相同）；</p></li><li><p>弹出文件夹选择窗口，选择工程目录的<strong>上一级文件夹</strong>。</p><p>出现如下警告时，点 yes，并在之后的弹窗中选择切换到工作区；</p></li></ol><p><img src="/picture_23.jpg" alt="NULL"></p><p>在资源管理器中可以看到以下文件：</p><p><img src="/picture_24.jpg" alt="NULL"></p><ol start="4"><li>选择项目资源，将以下类型的文件添加进项目资源中：</li></ol><blockquote><ol><li>源代码文件夹（包含.c&#x2F;.h文件）；</li><li>启动文件（.s文件）。<br><img src="/picture_25.jpg" alt="NULL"></li></ol></blockquote><ol start="5"><li>构建配置选项中的连接脚本路径修改为工程文件夹下后缀名为<code>.ld</code>的文件名（包含后缀）；</li></ol><p><img src="/picture_26.jpg" alt="NULL"></p><ol start="6"><li>烧录配置选择STLink</li><li>打开项目属性右侧的钳子图标：</li></ol><p><img src="/picture_27.jpg" alt="NULL"></p><p>添加以下内容（包含文件目录和全局宏定义）：</p><p><img src="/picture_28.jpg" alt="NULL"></p><p>注意：<strong>这些内容可以从工程文件夹中的Makefile文件中获得。</strong></p><p><img src="/picture_29.jpg" alt="NULL"></p><ol start="8"><li>随后可以进行编译和运行。</li></ol><p><img src="/picture_30.jpg" alt="NULL"></p><p>从左到右为编译，清理，下载，重新编译。</p><ul><li>调试配置</li></ul><p>在调试中选择设置，出现的<code>launch.json</code>文件中有以下配置选项：</p><p><img src="/picture_31.jpg" alt="NULL"></p><p>注意只需要修改第二个.cfg文件的文件名。</p><p>在Cortex Debug插件中，使用settings.json文件编辑方式，在此文件中加入以下几行：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;cortex-debug.armToolchainPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;R:\\User_Download\\Environment_Install\\GNU Arm Toolchain\\GNU Arm Embedded Toolchain\\10 2021.10\\bin&quot;</span><span class="hljs-punctuation">,</span> \\ 交叉编译链路径<br><span class="hljs-attr">&quot;cortex-debug.variableUseNaturalFormat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cortex-debug.openocdPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;R:\\User_Download\\Environment_Install\\OpenOCD\\OpenOCD-20230712-0.12.0\\bin\\openocd.exe&quot;</span><span class="hljs-punctuation">,</span> \\ OpenOCD路径<br></code></pre></td></tr></table></figure><p>随后即可使用stlink进行调试。</p>]]></content>
    
    
    <categories>
      
      <category>STM32</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
